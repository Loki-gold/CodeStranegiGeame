import random
import asyncio

class World:
    def __init__(self, world_size):
        self.world_size = world_size
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É (–¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤) —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:
        # 1 ‚Äì –ª–µ—Å, 2 ‚Äì —Ä–∞–≤–Ω–∏–Ω–∞, 3 ‚Äì –≥–æ—Ä—ã (–ø—Ä–∏–º–µ—Ä).
        self.world_status = [
            [random.randint(1, 3) for _ in range(world_size)]
            for _ in range(world_size)
        ]

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —é–Ω–∏—Ç–æ–≤: {(x, y): [unit1, unit2, ...]}
        self.units = {}

    def add_unit(self, unit, x, y):
        """
        –†–∞–∑–º–µ—â–∞–µ–º —é–Ω–∏—Ç–∞ –≤ –º–∏—Ä–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (x, y).
        """
        if 0 <= x < self.world_size and 0 <= y < self.world_size:
            if (x, y) not in self.units:
                self.units[(x, y)] = []
            self.units[(x, y)].append(unit)
            unit.world = self
            unit.x, unit.y = x, y  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç–µ —é–Ω–∏—Ç–∞
        else:
            raise ValueError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —é–Ω–∏—Ç–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–∞—Ä—Ç—ã!")

    def move_unit(self, unit, dx, dy):
        """
        –ü–µ—Ä–µ–º–µ—â–∞–µ–º —é–Ω–∏—Ç–∞ –Ω–∞ dx, dy –∫–ª–µ—Ç–æ–∫, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã.
        """
        new_x = unit.x + dx
        new_y = unit.y + dy

        if 0 <= new_x < self.world_size and 0 <= new_y < self.world_size:
            # –£–±–∏—Ä–∞–µ–º —é–Ω–∏—Ç–∞ —Å —Ç–µ–∫—É—â–µ–π –∫–ª–µ—Ç–∫–∏
            if (unit.x, unit.y) in self.units:
                self.units[(unit.x, unit.y)].remove(unit)
                if not self.units[(unit.x, unit.y)]:  # –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –æ–ø—É—Å—Ç–µ–ª–∞, —É–¥–∞–ª—è–µ–º –∫–ª—é—á
                    del self.units[(unit.x, unit.y)]

            # –î–æ–±–∞–≤–ª—è–µ–º —é–Ω–∏—Ç–∞ –Ω–∞ –Ω–æ–≤—É—é –∫–ª–µ—Ç–∫—É
            if (new_x, new_y) not in self.units:
                self.units[(new_x, new_y)] = []
            self.units[(new_x, new_y)].append(unit)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —é–Ω–∏—Ç–∞
            unit.x, unit.y = new_x, new_y
            return True
        return False

    def get_units_at(self, x, y):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —é–Ω–∏—Ç–æ–≤ –Ω–∞ –∫–ª–µ—Ç–∫–µ (x, y), –ª–∏–±–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
        """
        return self.units.get((x, y), [])

    def __repr__(self):
        return f"<World size={self.world_size} units={len(self.units)}>"

class Unit:
    def __init__(self):
        self.un_id = random.randint(1000000, 9999999)  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        self.atack_time = 1   # –í—Ä–µ–º—è –∞—Ç–∞–∫–∏ (—Å–µ–∫)
        self.atack_damage = 1  # –£—Ä–æ–Ω –∑–∞ 1 –∞—Ç–∞–∫—É
        self.speed_time = 1   # –í—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (—Å–µ–∫)
        self.view_range = 3   # –†–∞–¥–∏—É—Å –æ–±–∑–æ—Ä–∞ (3 => 7x7)
        self.heal_power = 1   # –°–∏–ª–∞ –ª–µ—á–µ–Ω–∏—è
        self.heal_time = 1    # –í—Ä–µ–º—è –ª–µ—á–µ–Ω–∏—è (—Å–µ–∫)
        self.max_hp = 10      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π HP
        self.hp = self.max_hp  # –¢–µ–∫—É—â–∏–π HP

        self.now_free = True   # –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —é–Ω–∏—Ç–∞
        self.world = None      # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∏—Ä
        self.x, self.y = 0, 0  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —é–Ω–∏—Ç–∞ (–∑–∞–¥–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏)

    async def step(self, dx, dy):
        """
        –î–≤–∏–≥–∞–µ–º —é–Ω–∏—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (dx, dy).
        """
        if self.now_free and self.world:
            self.now_free = False
            await asyncio.sleep(self.speed_time)
            success = self.world.move_unit(self, dx, dy)
            self.now_free = True
            return success
        return False

    def get_vision_map(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ (7x7 –ø—Ä–∏ view_range=3) –≤–æ–∫—Ä—É–≥ —é–Ω–∏—Ç–∞.
        –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –∫–æ—Ä—Ç–µ–∂ (—Ç–∏–ø –ª–æ–∫–∞—Ü–∏–∏, —Å–ø–∏—Å–æ–∫ —é–Ω–∏—Ç–æ–≤).
        """
        if not self.world:
            return []

        size = 2 * self.view_range + 1  # –†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ (7 –ø—Ä–∏ view_range=3)
        vision_map = []

        for row_offset in range(-self.view_range, self.view_range + 1):
            row_data = []
            for col_offset in range(-self.view_range, self.view_range + 1):
                real_x = self.x + col_offset
                real_y = self.y + row_offset

                if 0 <= real_x < self.world.world_size and 0 <= real_y < self.world.world_size:
                    terrain_type = self.world.world_status[real_y][real_x]
                    units_here = self.world.get_units_at(real_x, real_y)
                    row_data.append((terrain_type, units_here))
                else:
                    row_data.append(None)  # –ó–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –º–∏—Ä–∞
            vision_map.append(row_data)

        return vision_map

    def __repr__(self):
        return f"<Unit id={self.un_id} hp={self.hp}/{self.max_hp} ({self.x}, {self.y})>"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def main():
    w = World(10)  # –°–æ–∑–¥–∞—ë–º –º–∏—Ä 10x10
    u1 = Unit()
    u2 = Unit()
    u3 = Unit()

    # –†–∞–∑–º–µ—â–∞–µ–º —é–Ω–∏—Ç–æ–≤
    w.add_unit(u1, 5, 5)
    w.add_unit(u2, 6, 5)  # –†—è–¥–æ–º —Å u1
    w.add_unit(u3, 7, 5)  # –†—è–¥–æ–º —Å u1

    print("World:", w)
    print("u1:", u1)
    print("u2:", u2)
    print("u3:", u3)

    # –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤–∏–¥–∏—Ç u1
    vision = u1.get_vision_map()
    print("\nüëÄ u1 vision map (7x7):")
    for row in vision:
        print([cell if cell is not None else "X" for cell in row])

    # –î–≤–∏–≥–∞–µ–º u1 –≤–ø—Ä–∞–≤–æ
    await u1.step(1, 0)
    print("\nüìç u1 moved right!")
    print("u1 position:", (u1.x, u1.y))

    # –°–º–æ—Ç—Ä–∏–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    vision = u1.get_vision_map()
    print("\nüëÄ u1 vision map after moving:")
    for row in vision:
        print([cell if cell is not None else "X" for cell in row])

asyncio.run(main())
